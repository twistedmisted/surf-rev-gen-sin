

// Vertex shader
const vertexShaderSource = `
attribute vec3 vVertex;
attribute vec3 vNormal;
uniform mat4 ModelViewProjectionMatrix, normalMat;

uniform float shininess;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPosition;

varying vec3 vertPos;

uniform vec3 uLightDirection;

uniform float Ka;   
uniform float Kd;   
uniform float Ks;  

uniform float uSpotlightAngle;

uniform float u_innerLimit;
uniform float u_outerLimit;

varying vec4 color;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vVertex, 1.0);
    vertPos = vec3(vertPos4) / vertPos4.w;
    gl_Position = vertPos4;

    vec3 normal = normalize(vec3(normalMat * vec4(vNormal, 0.0)));
    vec3 lightDirection = normalize(lightPosition - vertPos);
    vec3 viewDirection = normalize(-vertPos);
    vec3 halfVector = normalize(lightDirection + viewDirection);

    float dotFromDirection = dot(lightDirection, -uLightDirection);
    float inLight = smoothstep(u_outerLimit, u_innerLimit, dotFromDirection);
    float light = inLight * dot(normal, lightDirection);
    float specAngle = max(dot(normal, halfVector), 0.0);
    float specular = inLight * pow(specAngle, shininess);
    
    color = vec4(Ka * ambientColor + Kd * light * diffuseColor + Ks * specular * specularColor, 1.0);
}`;

// Vertex shader for Light
const vertexShaderSourceForLight = `
attribute vec3 vLightLine;

void main() {
    gl_Position = vec4(vLightLine,1.0);
    gl_PointSize = 15.0;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec4 color;
void main() {
    gl_FragColor = color;
}`;

// Fragment shader for Light
const fragmentShaderSourceForLight = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
void main() {
    gl_FragColor = color;
}`;